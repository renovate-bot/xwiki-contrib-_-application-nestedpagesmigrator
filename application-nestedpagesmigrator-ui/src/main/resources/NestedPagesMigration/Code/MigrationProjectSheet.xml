<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="NestedPagesMigration.Code.MigrationProjectSheet" locale="">
  <web>NestedPagesMigration.Code</web>
  <name>MigrationProjectSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1252454400000</creationDate>
  <parent>NestedPagesMigration.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1452784366000</date>
  <contentUpdateDate>1452783789000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#************************************************************************
 * Compute and return the maximum authorized length for the full name.
 ************************************************************************#
#macro(getLocalReferenceMaxLength)
 #set ($localReferenceMaxLength = '255')
 ## Available since XWiki 11.4RC1.
 #if ($doc.localReferenceMaxLength)
   #set ($localReferenceMaxLength = $doc.localReferenceMaxLength)
 #end
 ## The document reference size limit was increased from 255 to 768 (the maximum supported by MySQL) in XWiki 13.2.
 #if ($services.extension.core.getCoreExtension('org.xwiki.platform:xwiki-platform-model').id.version.compareTo('13.2') &lt;= 0)
   #set ($localReferenceMaxLength = $mathtool.sub($localReferenceMaxLength, $xcontext.database.length()))
 #else
   ## To avoid issues with documents with path too long, take some extra margin, higher than the wiki name length.
   #set ($localReferenceMaxLength = $mathtool.sub($localReferenceMaxLength, 50))
 #end
 $localReferenceMaxLength
#end
{{/velocity}}

{{velocity}}
#if (!$services.security.authorization.hasAccess('admin', $xcontext.userReference, $doc.documentReference.wikiReference))
  {{error}}
  You don't have the right to use this tool on this wiki. You need to be administrator.
  {{/error}}
#elseif ($xcontext.action != 'view')
  {{error}}
  Only view mode is supported!
  {{/error}}
#else
#set ($discard = $xwiki.ssx.use('NestedPagesMigration.Code.MigrationProjectSheet'))
#set ($discard = $xwiki.jsx.use('NestedPagesMigration.Code.MigrationProjectSheet'))
## Both job.css and extension.css are needed because the ui-progress classes that we need to display
## a progress bar are in one of these 2 files depending on the XWiki version
#set ($discard = $xwiki.ssfx.use('uicomponents/job/job.css', true))
#set ($discard = $xwiki.ssfx.use('uicomponents/extension/extension.css', true))
#set ($discard = $xwiki.ssfx.use('uicomponents/logging/logging.css', true))
#set ($discard = $xwiki.linkx.use($services.webjars.url('org.xwiki.platform:xwiki-platform-tree-webjar', 'tree.min.css',
    {'evaluate': true}), {'type': 'text/css', 'rel': 'stylesheet'}))
## Needed 'font awesome' to display the 'arrows' icon, which is not present in the Icon Theme Set.
#set ($discard = $xwiki.ssx.use('IconThemes.FontAwesome'))
{{html clean="false"}}
&lt;div id="xclasses" class="hidden" data-localReferenceMaxLength="#getLocalReferenceMaxLength()"
  data-xclasses="#foreach($class in $xwiki.classList)#if($foreach.count&gt;1),#end${class}#end"&gt;&lt;/div&gt;
&lt;!------------------------------------------
  Migration Action Template
  -------------------------------------------&gt;
&lt;script id="MigrationActionTemplate" type="text/html"&gt;
  &lt;!-- ko foreach: ${escapetool.d}data.actions.sort(function (l, r) {return l.getTargetName() &gt; r.getTargetName() ? 1 : -1}) --&gt;
  &lt;li class="migration-action jstree-node" data-bind="
    css: {
      'jstree-closed': !displayChildren(),
      'jstree-open'  : displayChildren(),
      'jstree-leaf'  : getNumberOfChildren() == 0 &amp;&amp; getNumberOfPreferences() == 0 &amp;&amp; getNumberOfRights() == 0,
      'jstree-last'  : ${escapetool.d}index() == ${escapetool.d}parent.actions.length - 1,
      'moved-action' : ${escapetool.d}root.lastMovedAction() == ${escapetool.d}data
    },
    movable: true"&gt;
    ## Display the tree branch
    &lt;i class="jstree-icon jstree-ocl" role="presentation" data-bind="click: toggleDisplayChildren"&gt;&lt;/i&gt;
    ##  Display the checkbox
    &lt;input type="checkbox" data-bind="checked: enabled" /&gt;
    ## Display the 'all' link
    &lt;a href="#" data-bind="visible: !enabled() &amp;&amp; (getNumberOfChildren() &gt; 0 || getNumberOfPreferences() &gt; 0 || getNumberOfRights()&gt; 0), click: enableWithChildren" &gt;(all)&lt;/a&gt;
    ## Display the place where the user can drag the current item
    &lt;span class="movablePicker" data-bind="droppable: ${escapetool.d}data, editable: ${escapetool.d}data"&gt;
      ## Display the arrows
      &lt;span class="fa fa-arrows"&gt;&lt;/span&gt;
      ## Display the document name
      &lt;strong class="documentName" data-bind="text: getTargetName(), css: { 'bg-danger': isTooLong() }"&gt;&lt;/strong&gt;
    &lt;/span&gt;
    ## Display the target location
    [&lt;span data-bind="text: serializedTargetDocument()" class="monospace targetLocation"&gt;&lt;/span&gt;]
    ## Display if the action is a change or not
    &lt;em data-bind="visible: targetDocument().equals(sourceDocument)"&gt;(unchanged)&lt;/em&gt;
    ## Display if a previous document will be deleted
    &lt;strong data-bind="visible: deletePrevious"&gt;(previous document will be deleted)&lt;/strong&gt;
    ## Display the number of children
    (&lt;span data-bind="text: getNumberOfChildren()"&gt;&lt;/span&gt; children,
    ## Display the number of preferences
    &lt;span data-bind="text: getNumberOfPreferences()"&gt;&lt;/span&gt; preferences,
    ## Display the number of rights
    &lt;span data-bind="text: getNumberOfRights()"&gt;&lt;/span&gt; rights)
    ## Display the original location
    from &lt;a target="_blank" class="monospace sourceLocation" data-bind="text: serializedSourceDocument(), attr: {href: getSourceLink()}"&gt;&lt;/a&gt;
    ## Display all children
    &lt;!-- ko if: displayChildren() --&gt;
      ## Display preferences
      &lt;!-- ko if: preferences.length &gt; 0 --&gt;
        &lt;ul data-bind="foreach: preferences" class="jstree-children preferences"&gt;
          &lt;li class="text-warning jstree-node jstree-leaf"&gt;
            &lt;i class="jstree-icon jstree-ocl" role="presentation"&gt;&lt;/i&gt;
            &lt;input type="checkbox" data-bind="checked: enabled"/&gt; &lt;strong&gt;[Preferences] &lt;span data-bind="text: property" class="preferenceProperty"&gt;&lt;/span&gt; : &lt;span data-bind="text: value" class="preferenceValue"&gt;&lt;/span&gt;&lt;/strong&gt; (coming from &lt;a target="_blank" class="monospace" data-bind="text: getSerializedOrigin(), attr: {href: getOriginLink()}"&gt;&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;!-- /ko --&gt;
      ## Display rights
      &lt;!-- ko if: rights.length &gt; 0 --&gt;
        &lt;ul data-bind="foreach: rights" class="jstree-children"&gt;
          &lt;li class="text-danger jstree-node jstree-leaf"&gt;
            &lt;i class="jstree-icon jstree-ocl" role="presentation"&gt;&lt;/i&gt;
            &lt;input type="checkbox" data-bind="checked: enabled"/&gt; &lt;strong&gt;[Right] &lt;span data-bind="text: toString()"&gt;&lt;/span&gt;&lt;/strong&gt; (coming from &lt;a target="_blank" class="monospace" data-bind="text: getSerializedOrigin(), attr: {href: getOriginLink()}"&gt;&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;!-- /ko --&gt;
      ## Display children documents
      &lt;ul data-bind="template: { name: 'MigrationActionTemplate', data: {'actions': children()} }" class="jstree-children childrenActions"&gt;&lt;/ul&gt;
    &lt;!-- /ko --&gt;
  &lt;/li&gt;
  &lt;!-- /ko --&gt;
&lt;/script&gt;
&lt;!------------------------------------------
  Display Logs
  -------------------------------------------&gt;
&lt;script id="DisplayLogs" type="text/html"&gt;
  &lt;h2 class="log-title"&gt;Logs: &lt;/h2&gt;
  &lt;ul class="log" data-bind="if: logs().length &gt; 0"&gt;
    &lt;!-- ko foreach: logs --&gt;
    &lt;li class="log-item" data-bind="css: getClass()"&gt;
      &lt;div data-bind="text: message"&gt;&lt;/div&gt;
      &lt;!-- ko if: stackTrace --&gt;
      &lt;pre data-bind="text: stackTrace"&gt;&lt;/pre&gt;
      &lt;!--  /ko --&gt;
    &lt;/li&gt;
    &lt;!-- /ko --&gt;
  &lt;/ul&gt;
&lt;/script&gt;
&lt;!------------------------------------------
  Display plan
  -------------------------------------------&gt;
&lt;script id="DisplayPlan" type="text/html"&gt;
  &lt;h2&gt;Plan&lt;/h2&gt;
  &lt;div class="migration-plan box"&gt;
    &lt;div data-bind="if: isComputing()" id="planComputing"&gt;
      &lt;p&gt;The plan is being computed and it could take some time. Please wait...&lt;/p&gt;
      &lt;div class="ui-progress-background"&gt;
        &lt;div class="ui-progress-bar green" data-bind="style: {width: progress() + '%'}"&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div data-bind="if: isPlanModified() &amp;&amp; !isComputing()"&gt;
      &lt;p class="box warningmessage"&gt;Since you have moved some pages, you may want to recompute the preferences to be sure they will be preserved after the migration.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="box warningmessage" data-bind="visible: plan.duplicates().length &gt; 0"&gt;
      &lt;p&gt;The migration has detected some duplicated documents, that are probably the consequences of a failed attempt to run the migrator.&lt;br /&gt;
      &lt;p&gt;If it's the first time you run the migrator, you might have a problem.&lt;/p&gt;
      &lt;p&gt;Theses documents are:&lt;/p&gt;
      &lt;ul data-bind="foreach: {data: plan.duplicates(), as: 'doc'}"&gt;
        &lt;li data-bind="text: doc"&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;If you are ok with it, just run the migrator and these documents will be overwritten.&lt;/p&gt;
    &lt;/div&gt;
     &lt;div class="box errormessage" data-bind="visible: plan.tooLongs().length &gt; 0"&gt;
      &lt;p&gt;We have detected some pages that will have too long paths after the migration (limit is #getLocalReferenceMaxLength()). You should rename them (or rename one of their parents) before computing a new plan.&lt;/p&gt;
      &lt;p&gt;Theses pages are:&lt;/p&gt;
      &lt;ul data-bind="foreach: {data: plan.tooLongs(), as: 'action'}"&gt;
        &lt;li class="monospace"&gt;&lt;a data-bind="attr: {href: action.getSourceLink()}" target="_blank"&gt;&lt;span data-bind="text: action.serializedSourceDocument()"&gt;&lt;/span&gt;&lt;/a&gt; -&amp;gt; &lt;span data-bind="text: action.serializedTargetDocument()"&gt;&lt;/span&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;ul data-bind="if: plan.actions() &amp;&amp; !isComputing() &amp;&amp; !plan.isEmpty()" id="planTree" class="jstree jstree-xwiki jstree-xwiki-responsive jstree-container-ul"&gt;
      &lt;li class="jstree-node jstree-open jstree-last"&gt;
        &lt;i class="jstree-icon jstree-ocl" role="presentation"&gt;&lt;/i&gt;
        &lt;span data-bind="droppable"&gt;$services.icon.renderHTML('wiki') $services.wiki.currentWikiDescriptor.prettyName&lt;/span&gt;
        &lt;ul class="jstree-children"&gt;
          &lt;!-- ko template: {name: 'MigrationActionTemplate', data: {'actions': plan.actions() }} --&gt;
          &lt;!-- /ko --&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;!-- ko if: !isComputing() &amp;&amp; plan.isEmpty() --&gt;
    &lt;div class="box infomessage"&gt;
      &lt;p&gt;There is nothing to do!&lt;/p&gt;
    &lt;/div&gt;
    &lt;!-- /ko --&gt;
    &lt;!-- ko template: {name: 'DisplayLogs', data: ${escapetool.d}root} --&gt;
    &lt;!-- /ko --&gt;
  &lt;/div&gt;
&lt;/script&gt;
&lt;!------------------------------------------
  Display configuration
  -------------------------------------------&gt;
&lt;script id="DisplayConfiguration" type="text/html"&gt;
&lt;form class="xform"&gt;
  &lt;h2&gt;Configuration&lt;/h2&gt;
  &lt;div class="row"&gt;
  &lt;div class="col-xs-12 col-md-6"&gt;
    &lt;dl&gt;
      &lt;!-- Excluded pages --&gt;
      &lt;dt&gt;&lt;label for="excludedPages"&gt;Excluded pages&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;p class="xHint"&gt;Page references separated by commas (',')&lt;/p&gt;
        &lt;p&gt;&lt;input type="text" id="excludedPages" data-bind="value: configuration.excludedPages"&gt;&lt;/p&gt;
      &lt;/dd&gt;
      &lt;!-- Excluded spaces --&gt;
      &lt;dt&gt;&lt;label for="excludedSpaces"&gt;Excluded spaces&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;p class="xHint"&gt;Space references separated by commas (',')&lt;/p&gt;
        &lt;p&gt;&lt;input type="text" id="excludedSpaces" data-bind="value: configuration.excludedSpaces"&gt; &lt;/p&gt;
      &lt;/dd&gt;
      &lt;!-- Included spaces --&gt;
      &lt;dt&gt;&lt;label for="includedSpaces"&gt;Included spaces&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;p class="xHint"&gt;Space references separated by commas (',')&lt;/p&gt;
        &lt;p&gt;&lt;input type="text" id="includedSpaces" data-bind="value: configuration.includedSpaces"&gt; &lt;/p&gt;
      &lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/div&gt;
  &lt;div class="col-xs-12 col-md-6"&gt;
    &lt;p&gt;&lt;button class="btn btn-default" type="button" data-toggle="collapse" data-target="#advancedSettings" aria-expanded="false" aria-controls="advancedSettings"&gt;Advanced Settings&lt;/button&gt;&lt;/p&gt;
    &lt;dl id="advancedSettings" class="collapse well"&gt;
      &lt;!-- Exclude hidden pages --&gt;
      &lt;dt&gt;&lt;input type="checkbox" id="excludeHiddenPages" data-bind="checked: configuration.excludeHiddenPages"&gt; &lt;label for="excludeHiddenPages"&gt;Exclude hidden pages&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;span class="xHint"&gt;Most of the hidden pages are technical content. Moving them can break applications.&lt;/span&gt;&lt;/dd&gt;
      &lt;!-- Exclude class pages --&gt;
      &lt;dt&gt;&lt;input type="checkbox" id="excludeClassPages" data-bind="checked: configuration.excludeClassPages"&gt; &lt;label for="excludeClassPages"&gt;Exclude pages having a class&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;span class="xHint"&gt;The pages are technical and moving them can break applications.&lt;/span&gt;&lt;/dd&gt;
      &lt;!-- Don't move children --&gt;
      &lt;dt&gt;&lt;input type="checkbox" id="dontMoveChildren" data-bind="checked: configuration.dontMoveChildren"&gt; &lt;label for="dontMoveChildren"&gt;Do not move children&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;span class="xHint"&gt;Only convert terminal pages to nested pages, without moving them under their parent.&lt;/span&gt;&lt;/dd&gt;
      &lt;!-- Add redirection --&gt;
      &lt;dt&gt;&lt;input type="checkbox" id="addRedirection" data-bind="checked: configuration.addRedirection"&gt; &lt;label for="addRedirection"&gt;Add redirection&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;span class="xHint"&gt;Add a redirection in the old location.&lt;/span&gt;&lt;/dd&gt;
      &lt;!-- Convert preferences --&gt;
      &lt;dt&gt;&lt;input type="checkbox" id="convertPreferences" data-bind="checked: configuration.convertPreferences"&gt; &lt;label for="convertPreferences"&gt;Convert preferences&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;span class="xHint"&gt;Make sure that the preferences applied on the page remain the same after the move, by duplicating the preferences on the target document.&lt;/span&gt;&lt;/dd&gt;
      &lt;!-- Convert rights --&gt;
      &lt;dt&gt;&lt;input type="checkbox" id="convertRights" data-bind="checked: configuration.convertRights"&gt; &lt;label for="convertRights"&gt;Convert rights (experimental)&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;&lt;span class="xHint"&gt;Make sure that the rights applied on the page remain the same after the move &lt;span class="text-danger"&gt;(Currently bugged)&lt;/span&gt;.&lt;/span&gt;&lt;/dd&gt;
      &lt;!-- Excluded Object Classes --&gt;
      &lt;dt&gt;&lt;label for="excludedObjectClasses" data-bind="click: configuration.excludedXClasses.toggleCheckboxVisibility"&gt;Exclude classes&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;p class="xHint" data-bind="click: configuration.excludedXClasses.toggleCheckboxVisibility"&gt;Exclude pages holding an object of one of the specified classes (separated by a coma ',').&lt;/p&gt;
        &lt;p&gt;&lt;textarea id="excludedObjectClasses" data-bind="textInput: configuration.excludedXClasses.excludedXClasses, click: configuration.excludedXClasses.showCheckboxes"&gt;&lt;/textarea&gt;&lt;/p&gt;
        &lt;div data-bind="visible: configuration.excludedXClasses.areCheckboxesDisplayed"&gt;
          &lt;a data-bind="click: configuration.excludedXClasses.hideCheckboxes" href="#"&gt;$services.icon.renderHTML('remove') Hide&lt;/a&gt;
          &lt;ul data-bind="foreach: {data: configuration.excludedXClasses.allXClasses, as: 'xclass'}" style="list-style-type: none; padding: 0;"&gt;
            &lt;li&gt;&lt;label&gt;&lt;input type="checkbox" data-bind="checked: xclass.selected"/&gt; &lt;span data-bind="text: xclass.name"&lt;/span&gt;&lt;/label&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/dd&gt;
    &lt;/dl&gt;
  &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="clearfix"&gt;
    &lt;h2&gt;Actions&lt;/h2&gt;
    &lt;button class="btn btn-success" data-bind="click: startBreakageDetection, disable: isComputing() || isPlanExecuting()"&gt;Detect breakages&lt;/button&gt;
    &lt;button class="btn btn-primary" data-bind="click: computePlan, disable: isComputing() || isPlanExecuting()"&gt;Compute plan&lt;/button&gt;
    &lt;button class="btn" data-bind="click: convertPreferences, disable: isComputing() || isPlanExecuting(), css: {'btn-primary': isPlanModified(), 'btn-default': !isPlanModified()}"&gt;Recompute preferences&lt;/button&gt;
    &lt;button class="btn btn-primary" data-bind="disable: plan.actions().length == 0 || isPlanExecuting() || plan.tooLongs().length &gt; 0, click: executePlan"&gt;Execute plan&lt;/button&gt;
    &lt;button class="btn btn-default" data-bind="disable: plan.actions().length == 0 || isPlanExecuting(), click: cleanPlan"&gt;Clean plan (to free the memory)&lt;/button&gt;
  &lt;/div&gt;
&lt;/form&gt;
&lt;/script&gt;
&lt;!--
  This part is contained in a script tag so that nothing is displayed until "knockout" is executed.
  Otherwise, some incomplete plan, logs and progress bar are wrongly displayed and the user may wonder what they are.
--&gt;
&lt;script id="interactiveZone" type="text/html"&gt;
&lt;!-- ko template: {name: 'DisplayConfiguration', data: ${escapetool.d}root} --&gt;
&lt;!-- /ko --&gt;
&lt;!------------------------------------------
  Display plan
  -------------------------------------------&gt;
&lt;div id="migrationPlan" data-bind="if: isPlanRequested() &amp;&amp; !isPlanExecuting()"&gt;
  ## We escape the dollar of the knockout variable '$root' because $root also exists in velocity
  &lt;!-- ko template: {name: 'DisplayPlan', data: ${escapetool.d}root} --&gt;
  &lt;!-- /ko --&gt;
&lt;/div&gt;
&lt;!------------------------------------------
  Execute Plan
  -------------------------------------------&gt;
&lt;!-- ko if: isPlanExecuting() &amp;&amp; !success()--&gt;
&lt;div class="box" id="planExecuting"&gt;
  &lt;p&gt;The plan is being executed and it could take some time. Please wait...&lt;/p&gt;
  &lt;div class="ui-progress-background"&gt;
    &lt;div class="ui-progress-bar green" data-bind="style: {width: progress() + '%'}"&gt;&lt;/div&gt;
  &lt;/div&gt;
  &lt;!-- ko template: {name: 'DisplayLogs', data: ${escapetool.d}root} --&gt;
  &lt;!-- /ko --&gt;
&lt;/div&gt;
&lt;!-- /ko --&gt;
&lt;!------------------------------------------
  Display breakages
  -------------------------------------------&gt;
&lt;!-- ko if: isBreakageListRequested--&gt;
&lt;h2&gt;Breakages&lt;/h2&gt;
&lt;div class="box"&gt;
  &lt;div data-bind="if: isComputing"&gt;
    &lt;p&gt;The list of broken pages is being computed, please wait...&lt;/p&gt;
    &lt;div class="ui-progress-background"&gt;
      &lt;div class="ui-progress-bar green" data-bind="style: {width: progress() + '%'}"&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- ko template: {name: 'DisplayLogs', data: ${escapetool.d}root} --&gt;
    &lt;!-- /ko --&gt;
  &lt;/div&gt;
  &lt;div data-bind="ifnot: isComputing"&gt;
    &lt;p&gt;If you don't migrate your pages, &lt;strong data-bind="text: breakageList().size()"&gt;&lt;/strong&gt; documents will lose their current parent.&lt;/p&gt;
    &lt;ul data-bind="foreach: breakageList" id="breakageList"&gt;
      &lt;li&gt;Page &lt;span data-bind="text: document" class="monospace box infomessage" &gt;&lt;/span&gt; will lose its current parent &lt;span data-bind="text: actualParent" class="monospace box infomessage"&gt;&lt;/span&gt; because its location parent is &lt;span data-bind="text: locationParent" class="monospace box infomessage"&gt;&lt;/span&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;!-- /ko --&gt;
&lt;!------------------------------------------
  End message
  -------------------------------------------&gt;
&lt;!-- ko if: success() --&gt;
  &lt;div class="box successmessage" id="planExecuted"&gt;
  The plan has been executed!
  &lt;/div&gt;
  &lt;!-- ko template: {name: 'DisplayLogs', data: ${escapetool.d}root} --&gt;
  &lt;!-- /ko --&gt;
&lt;!-- /ko --&gt;
&lt;button class="btn btn-success" data-bind="disable: isPlanExecuting(), click: saveProject"&gt;Save the project&lt;/button&gt;
&lt;/script&gt;
&lt;!-- Now we just include this part thanks to the "template" binding of knockout: we make sure that this part is
     displayed only if knockout is loaded... --&gt;
&lt;!-- ko if: isLoaded() --&gt;
&lt;!-- ko template: {name: 'interactiveZone', data: ${escapetool.d}root} --&gt;
&lt;!-- /ko --&gt;
&lt;!-- /ko --&gt;
&lt;!-- Fallback to a loading message --&gt;
&lt;div data-bind="visible: !isLoaded()" class="box warningmessage"&gt;
  Loading, please wait...
  &lt;div class="loading" style="height: 80%;"&gt;
    &amp;nbsp;
  &lt;/div&gt;
&lt;/div&gt;
{{/html}}
#end
{{/velocity}}
</content>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>0378b449-4da2-4a22-8133-4ce238e9f126</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>'use strict';

require.config({
  paths: {
    #if ("$!request.minify" == false)
      'knockout' : "$services.webjars.url('knockout', 'knockout.debug.js')",
      'jquery-ui': "$services.webjars.url('jquery-ui', 'jquery-ui.js')"
    #else
      'knockout' : "$services.webjars.url('knockout', 'knockout.js')",
      'jquery-ui': "$services.webjars.url('jquery-ui', 'jquery-ui.min.js')"
    #end
  },
  shim: {
    'jquery-ui' : ['jquery']
  }
});</code>
    </property>
    <property>
      <name>Live view configuration</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>08ce319b-b3c0-498e-bb1e-739b775be769</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', 'xwiki-meta', 'knockout', 'utils', 'MigrationAction', 'Preference', 'Right', 'Breakage', 'Log', 'AppConfiguration', 'MigrationPlan', 'movable-binding-handler', 'editable-binding-handler'], function ($, xm, ko, utils, MigrationAction, Preference, Right, Breakage, Log, AppConfiguration, MigrationPlan) {

  /**
   * The model of the application. All data and functions used by the application view are stored here.
   */
  var AppViewModel = function () {
    var self = this;

    // Model
    self.configuration           = new AppConfiguration();
    self.plan                    = new MigrationPlan();
    self.breakageList            = ko.observableArray();
    self.logs                    = ko.observableArray();

    // UI stuffs
    self.isPlanRequested         = ko.observable(false);
    self.isBreakageListRequested = ko.observable(false);
    self.isComputing             = ko.observable(false);
    self.jobId                   = false;
    self.progress                = ko.observable(0);
    self.isPlanExecuting         = ko.observable(false);
    self.success                 = ko.observable(false);
    self.lastMovedAction         = ko.observable();
    self.isPlanModified          = ko.observable(false);
    self.isLoaded                = ko.observable(false);

    // Do not refresh logs too often (to get better performances, because a lot of logs
    // are pushed in the same time, so it is better to no refresh the UI at every push).
    self.logs.extend({ rateLimit: 200});

    /**
     * Clean the plan, the logs, the breakages... everything!
     */
    self.cleanAll = function () {
      self.plan.clean();
      self.breakageList.removeAll();
      self.logs.removeAll();
      self.progress(0);
    };

    /**
     * Send an ajax request to start a new job for the creation of a plan or the breakage detection
     */
    self._startComputationJob = function (action, callback) {
      self.isComputing(true);
      var data = {
        'action'               : action,
        'excludeHiddenPages'   : self.configuration.excludeHiddenPages(),
        'excludeClassPages'    : self.configuration.excludeClassPages(),
        'dontMoveChildren'     : self.configuration.dontMoveChildren(),
        'addRedirection'       : self.configuration.addRedirection(),
        'convertPreferences'   : self.configuration.convertPreferences(),
        'convertRights'        : self.configuration.convertRights(),
        'excludedPages'        : self.configuration.excludedPages(),
        'excludedSpaces'       : self.configuration.excludedSpaces(),
        'includedSpaces'       : self.configuration.includedSpaces(),
        'excludedObjectClasses': self.configuration.excludedXClasses.excludedXClasses()
      };
      if (action == 'convertPreferences') {
        data.plan = self.plan.getAsJSON();
      }
      self.cleanAll();
      $.post(utils.getServiceURL(), data)
        .done(callback)
        .fail(function () {
          console.log(action == 'startBreakageDetection' ? 'ERROR: Failed to start the breakage detection.'
            : 'ERROR: Failed to start a new plan computation.' );
        });
    }

    /**
     * Send an ajax request to start a new job for the creation of a plan.
     */
    self.computePlan = function() {
      if (!self.plan.isEmpty() &amp;&amp; !confirm('Please confirm you want to recompute the plan. The current one will be lost.')) {
        return;
      }
      self.isPlanRequested(true);
      self.isBreakageListRequested(false);
      self._startComputationJob('createPlan', function (data) {
        self.jobId = data.jobId;
        self._getJobStatusAndLogs('createmigrationplan', function() { self._getMigrationPlan(); });
      });
    };

    /**
     * Send an ajax request to start a new job for the convertion of the preferences.
     */
    self.convertPreferences = function() {
      if (!self.plan.isEmpty() &amp;&amp; !confirm('Please confirm you want to recompute the preferences. The current ones will be lost.')) {
        return;
      }
      self.isPlanRequested(true);
      self.isBreakageListRequested(false);
      self._startComputationJob('convertPreferences', function (data) {
        self.jobId = data.jobId;
        self._getJobStatusAndLogs('createmigrationplan', function() { self._getMigrationPlan(); });
      });
    };

    /**
     * Perform an AJAX request to get the current job status and its logs, so we can update the progress bar and the
     * logs UI.
     */
    self._getJobStatusAndLogs = function (jobAction, successCallback) {
      $.getJSON(utils.getServiceURL(), {
        'action' : 'printStatusAndLogs',
        'jobAction' : jobAction
      }).done(function (data) {
        var logs = data.logs;
        for (var i = self.logs().length; i &lt; logs.length; ++i) {
          self.logs.push(new Log(logs[i].message, logs[i].level, logs[i].stackTrace));
        }
        var state = data.state;
        if (state == 'FINISHED') {
          self.progress(100);
          if (successCallback) {
            successCallback();
          }
        } else if (state == 'RUNNING' || state == 'NONE') {
          self.progress(data.progress * 100);
          // retry in 0.8 seconds
          setTimeout(function() { self._getJobStatusAndLogs(jobAction, successCallback); }, 800);
        }
      });
    };

    /**
     * Load the plan from a JSON source
     */
    self._loadPlanFromJSON = function (json) {
      var parseAction = function (data, parent) {
        var action = new MigrationAction(data.sourceDocument, data.targetDocument, parent);
        if (data.children) {
          for (var i = 0; i &lt; data.children.length; ++i) {
            action.children.push(parseAction(data.children[i], action));
          }
        }
        if (data.preferences) {
          for (var i = 0; i &lt; data.preferences.length; ++i) {
            var enabled = data.preferences[i].enabled === undefined || data.preferences[i].enabled;
            action.preferences[action.preferences.length] = new Preference(data.preferences[i].name, data.preferences[i].value, data.preferences[i].origin, enabled);
          }
        }
        if (data.rights) {
          for (var i = 0; i &lt; data.rights.length; ++i) {
            var enabled = data.rights[i].enabled === undefined || data.rights[i].enabled;
            action.rights[action.rights.length] = new Right(data.rights[i].user, data.rights[i].group, data.rights[i].level, data.rights[i].allow == "true", data.rights[i].origin, enabled);
          }
        }
        action.enabled(data.enabled === undefined || data.enabled);
        if (data.deletePrevious) {
          action.deletePrevious = true;
          self.plan.duplicates.push(action.serializedTargetDocument());
        }
        if (action.isTooLong()) {
          self.plan.tooLongs.push(action);
        }
        return action;
      };

      if (json) {
        self.plan.actions.removeAll();
        for (var i = 0; i &lt; json.length; ++i) {
          self.plan.actions.push(parseAction(json[i], false));
        }
      }
      // Plan is loaded
      self.isComputing(false);
      self.isPlanModified(false);
      console.log('INFO: Plan has been parsed.');
    };

    /**
     * Get the migration plan that has been computed, in order to display it.
     */
    self._getMigrationPlan = function () {
      $.getJSON(utils.getServiceURL(), {
        'action': 'printPlan'
      }).done(function (data) {
        console.log('INFO: Plan computed');
        self._loadPlanFromJSON(data);
      }).fail(function () {
        new XWiki.widgets.Notification('Failed to load the computed plan', 'error');
        //TODO: being able to restart the computation
      });
    };

    self.startBreakageDetection = function () {
      self.isPlanRequested(false);
      self.isBreakageListRequested(true);
      self._startComputationJob('startBreakageDetection', function (data) {
        self.jobId = data.jobId;
        self.cleanAll();
        self._getJobStatusAndLogs('breakagedetection', function() { self._getBreakages(); });
      });
    };

    /**
     * Get breakage list that has been computed, in order to display it.
     */
    self._getBreakages = function () {
      $.getJSON(utils.getServiceURL(), {
        'action': 'printBreakages'
      }).done(function (data) {
        for (var i = 0; i &lt; data.length; ++i) {
          self.breakageList.push(new Breakage(data[i].documentReference, data[i].locationParent, data[i].actualParent));
        }
        // Plan is loaded
        self.isComputing(false);
      }).fail(function () {
        new XWiki.widgets.Notification('Failed to load the breakages', 'error');
        //TODO: being able to restart the computation
      });
    };

    /**
     * Called when the user clicks on "execute plan"
     */
    self.executePlan = function () {
      if (!confirm('Are you sure? This operation cannot be undone.')) {
        return;
      }
      self.isPlanExecuting(true);
      self.progress(0);

      // TODO: remove this part
      var getDisabledActions = function (action) {
        var disabledActions = '';
        if (!action.enabled()) {
          disabledActions += action.serializedSourceDocument() + '_page,';
        }
        for (var i = 0; i &lt; action.preferences.length; ++i) {
          var preference = action.preferences[i];
          if (!preference.enabled()) {
            disabledActions += action.serializedSourceDocument() + '_preference_' + i + ',';
          }
        }
        for (var i = 0; i &lt; action.rights.length; ++i) {
          var right = action.rights[i];
          if (!right.enabled()) {
            disabledActions += action.serializedSourceDocument() + '_right_' + i + ',';
          }
        }
        for (var i = 0; i &lt; action.children().length; ++i) {
          disabledActions += getDisabledActions(action.children()[i]);
        }
        return disabledActions;
      };

      var disabledActions = '';
      for (var i = 0; i &lt; self.plan.actions().length; ++i) {
        var action = self.plan.actions()[i];
        disabledActions += getDisabledActions(action);
      }

      $.ajax(utils.getServiceURL(), {
        'data': {
          'action'               : 'executePlan',
          'addRedirection'       : self.configuration.addRedirection(),
          'disabledActions'      : disabledActions,
          'plan'                 : self.plan.getAsJSON()
        },
        'method': 'POST',
        'data-type': 'json'
      }).done(function (data) {
        self.jobId = data.jobId;
        self.logs.removeAll();
        self._getJobStatusAndLogs('executemigrationplan', function() { self.success(true); });
      }).fail(function () {
        console.log('ERROR: Failed to execute the plan.');
      });
    }

    /**
     * Clean the plan to free the memory on the server.
     */
    self.cleanPlan = function() {
      $.ajax(utils.getServiceURL(), {
        'data': {'action': 'cleanPlan'},
        'method': 'POST'
      }).done(function() {
        self.isPlanRequested(false);
        self.cleanAll();
      });
    };

    /**
     * Mark an action with the "last moved action" tag, which is displayed with a special color so that the user
     * can see where her selection has finally been moved.
     */
    self.updateLastMovedAction = function (action) {
      self.lastMovedAction(action);
      // However, remove this tag after 4 seconds, otherwise it might be confusing.
      setTimeout(function() {
        self.lastMovedAction(false);
      }, 4000);
    };

    /**
     * Save current project
     */
    self.saveProject = function () {
      var notification = new XWiki.widgets.Notification('Page is saving', 'inprogress');
      var url = xm.restURL + '/objects/NestedPagesMigration.Code.MigrationProjectClass/0';
      var data = self.configuration.getValuesForSave();
      data['property#jsonPlan'] = self.plan.getAsJSON();
      $.ajax(url, {
        method: 'PUT',
        data: data
      }).done(function(){
        notification.hide();
        new XWiki.widgets.Notification('Page is saved', 'done');
      }).fail(function(data){
        notification.hide();
        new XWiki.widgets.Notification('Failed to save the project (' + data.status + ' ' + data.statusText + ').', 'error');
      });;
    };

    /**
     * Load the project
     */
    self.loadProject = function () {
      var url = xm.restURL + '/objects/NestedPagesMigration.Code.MigrationProjectClass/0?media=json';
      $.get(url).done(function(json){
        self.configuration.loadFromJSON(json);
        for (var i = 0; i &lt; json.properties.length; ++i) {
          if (json.properties[i].name == 'jsonPlan' &amp;&amp; json.properties[i].value.length &gt; 0) {
            self._loadPlanFromJSON($.parseJSON(json.properties[i].value));
            break;
          }
        }
        if (self.plan.actions().length &gt; 0) {
          self.isPlanRequested(true);
        }
        self.isLoaded(true);
      }).fail(function(data){
        new XWiki.widgets.Notification('Failed to load the project (' + data.status + ' ' + data.statusText + ').', 'error');
      });
    };

    // Load the project on startup
    self.loadProject();
  };

  // Activates knockout.js
  ko.applyBindings(new AppViewModel());
});
</code>
    </property>
    <property>
      <name>Live view</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>98595644-d883-4972-b3f5-f240baa461f1</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery'], function ($) {
  $(document).ready(function() {
    $(".edit_section").remove();
    $('#tmEdit').hide();
  });
});
</code>
    </property>
    <property>
      <name>Remove edit sections</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>4</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>39242f0a-9037-4247-9b6a-a70f5807fb82</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Define some utilities used by the live view.
 * @since 0.8
 */
define('utils', ['xwiki-meta'], function(xm) {
  return {
    /**
     * Return the URL of the Nested Pages Migration Service
     */
    getServiceURL: function() {
      return new XWiki.Document(
        new XWiki.DocumentReference(
          xm.documentReference.extractReferenceValue(XWiki.EntityType.WIKI),
          ['NestedPagesMigration', 'Code'],
          'Service'
        )
      ).getURL('get', 'outputSyntax=plain');
    },

    /**
     * Generate the fullName of a document without the wiki part (e.g. "Main.WebHome").
     * @param document the serialized reference of a document (e.g. "mywiki:Main.WebHome")
     */
    serializeLocally: function (document) {
      var documentReference = XWiki.Model.resolve(document, XWiki.EntityType.DOCUMENT).relativeTo(xm.documentReference.extractReference(XWiki.EntityType.WIKI));
      return XWiki.Model.serialize(documentReference);
    },

    /**
     * @param document the serialized reference of a document (e.g. "mywiki:Main.WebHome")
     * @return the corresponding document reference without the wiki part.
     */
    resolveLocally: function (document) {
      return XWiki.Model.resolve(document, XWiki.EntityType.DOCUMENT).relativeTo(xm.documentReference.extractReference(XWiki.EntityType.WIKI));
    },

    /**
     * Append some content to a string, separated by a comma if needed.
     * @param string the string on which we will add some content
     * @param toAppend the content to append to that string
     * @return the concatenation of string and toAppend, separated by a comma if string was not empty
     */
    appendToString: function (string, toAppend) {
      var result = string;
      if (result.length &gt; 0) {
        result += ',';
      }
      result += toAppend;
      return result;
    },

    /**
     * @return all locations used by the action and its children
     */
    getLocations: function (action, locations) {
      locations.push(action.serializedTargetDocument());
      for (var i = 0; i &lt; action.children().length; ++i) {
        this.getLocations(action.children()[i], locations);
      }
      return locations;
    },

    /**
     * @return if the target name is already used in the array of actions
     */
    hasCollision: function (targetName, arrayOfActions) {
      for (var i = 0; i &lt; arrayOfActions.length; ++i) {
        if (arrayOfActions[i].getTargetName() == targetName) {
          return true;
        }
      }
      return false;
    },

    /**
     * @return the maximum authorized length for the full name
     */
    getLocalReferenceMaxLength: function() {
      return $('xclasses').readAttribute('data-localReferenceMaxLength');
    }
  };
});
</code>
    </property>
    <property>
      <name>Define Utilities tools</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>5</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>922734a6-e106-4af5-82ad-9ef9c2e698d8</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Class that represent a single migration action.
 * @since 0.8
 */
define('MigrationAction', ['utils', 'knockout'], function (utils, ko) {
  /**
   * Construct a MigrationAction.
   * @param source the serialized document reference of the document to migrate
   * @param target the serialized document reference of the destination
   * @param parent the parent MigrationAction (can be null)
   */
  return function (source, target, parent) {
    var self = this;

    self.parent          = parent;
    self.sourceDocument  = utils.resolveLocally(source);
    self.targetDocument  = ko.observable(utils.resolveLocally(target));
    self.children        = ko.observableArray();
    self.displayChildren = ko.observable(false);
    self.enabled         = ko.observable(true);
    self.preferences     = [];
    self.rights          = [];
    self.deletePrevious  = false;
    self.localReferenceMaxLength = utils.getLocalReferenceMaxLength();

    /**
     * @return the serialized document reference of the source
     */
    self.serializedSourceDocument = function () {
      return XWiki.Model.serialize(self.sourceDocument);
    };

    /**
     * @return the serialized document reference of the target
     */
    self.serializedTargetDocument = function () {
      return XWiki.Model.serialize(self.targetDocument());
    };

    /**
     * @return the total number of children (counting the number of their own children)
     */
    self.getNumberOfChildren = function () {
      var number = self.children().length;
      for (var i = 0; i &lt; self.children().length; ++i) {
        number += self.children()[i].getNumberOfChildren();
      }
      return number;
    };

    /**
     * @return the document name of the destination
     */
    self.getTargetName = function () {
      return self.targetDocument().getName() == 'WebHome' ? self.targetDocument().parent.getName() : self.targetDocument().getName();
    }

    /**
     * @return if the document path is too long (and then cannot be saved in the database)
     */
    self.isTooLong = function () {
      return self.serializedTargetDocument().length &gt; self.localReferenceMaxLength;
    }

    /**
     * @return the URL of the source document
     */
    self.getSourceLink = function () {
      return new XWiki.Document(self.sourceDocument).getURL();
    }

    /**
     * Display or hide the children of this action in the UI.
     */
    self.toggleDisplayChildren = function() {
      self.displayChildren(!self.displayChildren());
    }

    /**
     * Disable the children actions (i.e. they won't be executed).
     */
    self.disableChildren = function () {
      for (var i = 0; i &lt; self.children().length; ++i) {
        self.children()[i].enabled(false);
      }
      for (var i = 0; i &lt; self.preferences.length; ++i) {
        self.preferences[i].enabled(false);
      }
      for (var i = 0; i &lt; self.rights.length; ++i) {
        self.rights[i].enabled(false);
      }
    };

    /**
     * (Internal) Listener that disable all the children if the action is disabled
     */
    self.enabled.subscribe(function (newValue) {
      if (!newValue) {
        self.disableChildren();
      }
    });

    /**
     * Enable the migration action and all its children as well.
     */
    self.enableWithChildren = function() {
      self.enabled(true);
      for (var i = 0; i &lt; self.preferences.length; ++i) {
        self.preferences[i].enabled(true);
      }
      for (var i = 0; i &lt; self.rights.length; ++i) {
        self.rights[i].enabled(true);
      }
      for (var i = 0; i &lt; self.children().length; ++i) {
        self.children()[i].enableWithChildren();
      }
    }

    /**
     * @return the number if preferences action contained in this action
     */
    self.getNumberOfPreferences = function () {
      return self.preferences.length;
    }

    /**
     * @return the number if rights action contained in this action
     */
    self.getNumberOfRights = function () {
      return self.rights.length;
    }

    /**
     * Change the parent action of the current action, and update children actions too.
     * @param newParent the new parent of the action (can be null if the new destination is a top-level document)
     */
    self.updateParent = function (newParent) {
      self.parent = newParent;
      if (newParent) {
        // If the current target document is "A.B.WebHome" and the new parent is "C.D.WebHome",
        // then the new target document should be "C.D.B.WebHome".
        // Therefore the new space is "C.D.B".
        var newSpace = new XWiki.EntityReference(
          // Get the name of the space of the current target document (in our example, it's "B").
          self.targetDocument().extractReferenceValue(XWiki.EntityType.SPACE),
          // The entity is a space
          XWiki.EntityType.SPACE,
          // Extract the space of the new parent (in our example it's "C.D").
          newParent.targetDocument().extractReference(XWiki.EntityType.SPACE)
        );
        // Finally compute the new target document.
        self.targetDocument(new XWiki.EntityReference(
          // Use the sane name (should be "WebHome")
          self.targetDocument().name,
          // The entity is a document
          XWiki.EntityType.DOCUMENT,
          // The parent is the space we have computed aboved.
          newSpace
        ));
      } else {
        // If no parent, then we want to have a top-level document.
        // For example: "A.B.WebHome" becomes "B.WebHome".
        // Note: in this application we want to deal with local references only.
        self.targetDocument(new XWiki.DocumentReference(
          '',
          // Extract the space name of the current target (In our example, it's "B").
          self.targetDocument().extractReferenceValue(XWiki.EntityType.SPACE),
          // Use the sane name (should be "WebHome")
          self.targetDocument().name
        ).relativeTo(new XWiki.WikiReference('')));
      }

      // Update children too
      for (var i = 0; i &lt; self.children().length; ++i) {
        self.children()[i].updateParent(self);
      }
    };

    /**
     * Serialize a Migration Action.
     */
    var serialize = function () {
      // Serialize source and target
      var jsonAction = {
        sourceDocument: action.serializedSourceDocument(),
        targetDocument: action.serializedTargetDocument()
      };

      // Serialize enabled
      if (!action.enabled()) {
        jsonAction.enabled = false;
      }

      // Serialize preferences
      if (action.preferences.length &gt; 0) {
        jsonAction.preferences = [];
        for (var i = 0; i &lt; action.preferences.length; ++i) {
          var preference = action.preferences[i];
          var jsonPreference = {
            name: preference.property,
            value: preference.value,
            origin: preference.getSerializedOrigin(),
            enabled: preference.enabled()
          }
          jsonAction.preferences.push(jsonPreference);
        }
      }

      if (action.rights.length &gt; 0) {
        jsonAction.rights = [];
        for (var i = 0; i &lt; action.rights.length; ++i) {
          var right = action.rights[i];
          var jsonRight = {
            user: right.user,
            group: right.group,
            level: right.level,
            allow: right.allow,
            origin: right.getSerializedOrigin(),
            enabled: right.enabled()
          };
          jsonAction.rights.push(jsonRight);
        }
      }

      if (action.children().length &gt; 0) {
        jsonAction.children = [];
        for (var i = 0; i &lt; action.children().length; ++i) {
          var child = serializeAction(action.children()[i]);
          jsonAction.children.push(child);
        }
      }

      return jsonAction;
    };
  };
});
</code>
    </property>
    <property>
      <name>Define MigrationAction class</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>6</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>837f32a4-a8d6-4df9-9e96-69faf4599aed</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Class representing a preference.
 * @since 0.8
 */
define('Preference', ['utils', 'knockout'], function (utils, ko) {
  /**
   * Construct a Preference.
   * @param property the name of the preference's property
   * @param value the value to set
   * @param origin the document reference of the page that initially applies this preference
   */
  return function(property, value, origin, enabled) {
    var self = this;

    self.property = property;
    self.value    = value;
    self.origin   = origin;
    self.enabled  = ko.observable(enabled);

    /**
     * @return the serialized reference of the origin
     */
    self.getSerializedOrigin = function () {
      return utils.serializeLocally(self.origin);
    };

    /**
     * @return the URL of the origin document
     */
    self.getOriginLink = function () {
      return new XWiki.Document(utils.resolveLocally(self.origin)).getURL('admin');
    };
  };
});
</code>
    </property>
    <property>
      <name>Define Preference class</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>7</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>7374329f-b715-4a40-a518-16d43062c0f3</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Class representing a right.
 * @since 0.8
 */
define('Right', ['utils', 'knockout'], function (utils, ko) {
  /**
   * Construct a Right class.
   */
  return function (user, group, level, allow, origin, enabled) {
    var self = this;

    self.user   = user;
    self.group  = group;
    self.level  = level;
    self.allow  = allow;
    self.origin = origin;
    self.enabled  = ko.observable(enabled);

    self.getType = function () {
      return self.user ? 'user' : 'group';
    };

    self.getTarget = function () {
      return self.user ? self.user : self.group;
    };

    self.getAllow = function () {
      return self.allow ? 'allow' : 'deny';
    };

    self.toString = function () {
      return self.getType() + ' : ' + self.getTarget() + ', ' + self.level + ' : ' + self.getAllow();
    };

    self.getSerializedOrigin = function () {
      return utils.serializeLocally(self.origin);
    };

    self.getOriginLink = function () {
      var ref = utils.resolveLocally(self.origin);
      return new XWiki.Document(ref).getURL('admin', ref.name == 'WebPreferences' ? 'section=PageAndChildrenRights' : 'section=Rights');
    };
  };
});
</code>
    </property>
    <property>
      <name>Define Rights class</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>8</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d85d5c8d-9f4a-4ec0-b9a6-11eb58bafd62</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Represent a breakage between location parent and actual parent
 * @since 0.8
 */
define('Breakage', function() {
  /**
   * Construct a Breakage.
   */
  return function (document, locationParent, actualParent) {
    var self = this;
    self.document       = document;
    self.locationParent = locationParent;
    self.actualParent   = actualParent;
  };
});
</code>
    </property>
    <property>
      <name>Define Breakage class</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>9</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>e9efc1a8-6d6f-4621-9a68-a586e57ccedc</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Class holding the configuration used to compute the plan.
 * @since 0.8
 */
define('AppConfiguration', ['utils', 'knockout', 'ExcludedXClasses'], function(utils, ko, ExcludedXClasses) {
  /**
   * Construct an AppConfiguration.
   */
  return function () {
    var self = this;

    this.excludeHiddenPages    = ko.observable(true);
    this.excludeClassPages     = ko.observable(true);
    this.dontMoveChildren      = ko.observable(false);
    this.addRedirection        = ko.observable(true);
    this.convertPreferences    = ko.observable(true);
    this.convertRights         = ko.observable(false);
    this.excludedPages         = ko.observable('');
    this.excludedSpaces        = ko.observable('XWiki,Admin,NestedPagesMigration');
    this.includedSpaces        = ko.observable('');
    this.excludedXClasses      = new ExcludedXClasses();

    this.getValuesForSave = function () {
      return {
        'property#excludedPages'          : self.excludedPages(),
        'property#excludedSpaces'         : self.excludedSpaces(),
        'property#includedSpaces'         : self.includedSpaces(),
        'property#excludeHiddenPages'     : self.excludeHiddenPages() ? 1 : 0,
        'property#excludePagesHavingClass': self.excludeClassPages() ? 1 : 0,
        'property#doNotMoveChildren'      : self.dontMoveChildren() ? 1 : 0,
        'property#addRedirection'         : self.addRedirection() ? 1 : 0,
        'property#convertPreferences'     : self.convertPreferences() ? 1 : 0,
        'property#convertRights'          : self.convertRights() ? 1 : 0,
        'property#excludedClasses'        : self.excludedXClasses.excludedXClasses()
      };
    };

    this.loadFromJSON = function (json) {
      var getPropertyValue = function (propertyName, json) {
        for (var i = 0; i &lt; json.properties.length; ++i) {
          if (json.properties[i].name == propertyName) {
            return json.properties[i].value;
          }
        }
        return false;
      };

      self.excludedPages(getPropertyValue('excludedPages', json));
      self.excludedSpaces(getPropertyValue('excludedSpaces', json));
      self.includedSpaces(getPropertyValue('includedSpaces', json));
      self.excludeHiddenPages(getPropertyValue('excludeHiddenPages', json) == '1');
      self.excludeClassPages(getPropertyValue('excludePagesHavingClass', json) == '1');
      self.dontMoveChildren(getPropertyValue('doNotMoveChildren', json) == '1');
      self.addRedirection(getPropertyValue('addRedirection', json) == '1');
      self.convertPreferences(getPropertyValue('convertPreferences', json) == '1');
      self.convertRights(getPropertyValue('convertRights', json) == '1');
      self.excludedXClasses.excludedXClasses(getPropertyValue('excludedClasses', json));
    }
  };
});
</code>
    </property>
    <property>
      <name>Define AppConfiguration class</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>10</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>2cd0e86f-8594-4b30-9569-3fff9aebf13c</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Represents a log entry.
 * @since 0.8
 */
define('Log', function() {
  /**
   * Construct a Log.
   */
  return function (message, level, stackTrace) {
    var self = this;

    self.message    = message;
    self.level      = level;
    self.stackTrace = stackTrace;

    self.getClass = function () {
      return 'log-item-' + self.level.toLowerCase();
    }
  };
});
</code>
    </property>
    <property>
      <name>Define Log class</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>11</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>3754bed6-da7f-4d0b-bacf-f4d326dcf175</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Custom binding used to enable the move of actions with a drag &amp; drop.
 * @since 0.8
 */
define('movable-binding-handler', ['knockout', 'jquery', 'utils', 'jquery-ui'], function (ko, $, utils) {

  /**
   * Revert the move of an action.
   */
  var revertMove = function(action, parentContainer, currentParentAction, notification) {
    // Put back the action inside its initial parent.
    // Force the refresh by removing it and adding it again, because there is no way to say to the
    // draggable element to go back to its initial place asynchronously.
    action.updateParent(currentParentAction);
    parentContainer.remove(action);
    parentContainer.push(action);
    notification.hide();
  }

  ko.bindingHandlers.droppable = {
    init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
      var model = bindingContext.$root;
      $(element).droppable({
        tolerance  : 'pointer',
        activeClass: 'droppable-active',
        hoverClass : 'droppable-hover',
        drop : function(event, ui) {
          var draggable          = $(ui.draggable);
          var action             = draggable.data('action');
          var parentContainer    = action.parent ? action.parent.children : model.plan.actions;
          var newParentAction    = valueAccessor();
          var newParentContainer = newParentAction ? newParentAction.children : model.plan.actions;
          var currentParentAction = action.parent;
          var notification = new XWiki.widgets.Notification('Looking if the location is free.', 'inprogress');
          // First look if it there is no colliding action
          if (utils.hasCollision(action.getTargetName(), newParentContainer())) {
            revertMove(action, parentContainer, currentParentAction, notification);
            alert('Cannot move this page here because a page [' + action.getTargetName() + '] already exists in the plan.');
            model.updateLastMovedAction(action, bindingContext);
          } else {
            action.updateParent(newParentAction);
            // Test if the locations are availabe
            var locations = utils.getLocations(action, []);
            $.post(utils.getServiceURL(),
              { action: 'checkLocations', locations: JSON.stringify(locations) }, null, 'json')
            .done(function (results) {
              notification.hide();
              // We allowed the move if there is no collision or if it collides with the source document (identity action).
              if (results.length == 0 || results[0] == action.serializedSourceDocument()) {
                parentContainer.remove(action);
                newParentContainer.push(action);
                model.isPlanModified(true);
                if (newParentAction) {
                  newParentAction.displayChildren(true);
                }
              } else {
                revertMove(action, parentContainer, currentParentAction, notification);
                alert('Cannot move this page here because [' + results.join(', ') + '] already exist(s) in the wiki.');
              }
              model.updateLastMovedAction(action, bindingContext);
            });
          }
        }
      });
    }
  }

  ko.bindingHandlers.movable = {
    init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
      var movableElement = $(element);
      movableElement.data('action', bindingContext.$rawData);
      movableElement.draggable({
         handle: '&gt; .movablePicker',
         revert: 'invalid',
         revertDuration: 200,
         zIndex: 1000,

         start: function (event, ui) {
           movableElement.removeClass('jstree-node');
           movableElement.find('&gt; ul').hide();
           movableElement.find('.jstree-button').hide();
         },

         /**
          * Called when a migration action is moved unside the plan.
          */
         stop: function (event, ui) {
           movableElement.addClass('jstree-node');
           movableElement.find('&gt; ul').show();
           movableElement.find('.jstree-button').show();
         }
      });
    }
  };
});
</code>
    </property>
    <property>
      <name>Define movable-binding-handler</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>12</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>bb41847e-cf95-49af-b0a7-4fdc0691f0d1</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Represent a Migration Plan.
 * @since 0.8
 */
define('MigrationPlan', ['knockout', 'SerializerHelper'], function(ko, SerializerHelper) {
  /**
   * Construct a Migration Plan
   */
  return function() {
    var self = this;

    /**
     * Initialization
     */
    self.actions    = ko.observableArray();
    self.duplicates = ko.observableArray();
    self.tooLongs   = ko.observableArray();

    // Do not refresh actions too often (to get better performances, because a lot of actions
    // are pushed in the same time, so it is better to no refresh the UI at every push).
    self.actions.extend({ rateLimit: 200 });

    /**
     * Clean the plan
     */
    self.clean = function () {
      self.actions.removeAll();
      self.duplicates.removeAll();
      self.tooLongs.removeAll();
    };

    /**
     * Computed observable variable that returns if the plan is empty.
     */
    self.isEmpty = ko.computed(function () {
      return self.actions().length == 0;
    });

    /**
     * Generate a JSON representation of a plan.
     */
    self.getAsJSON = function () {
      return JSON.stringify(SerializerHelper.serializePlan(self), null, '  ');
    };
  };
});
</code>
    </property>
    <property>
      <name>Define MigrationPlan class</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>13</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>54803832-19ad-4a00-8dc7-3080183011ae</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Generates some plain objects ready to be serialized with JSON.stringify.
 * @since 0.8
 */
define('SerializerHelper', function() {
  /**
   * Construct a Singleton SerializerHelper
   */
  return new function() {
    var self = this;

    /**
     * Serialize a Preference.
     */
    self.serializePreference = function (preference) {
      return {
        name: preference.property,
        value: preference.value,
        origin: preference.getSerializedOrigin(),
        enabled: preference.enabled()
      };
    };

    /**
     * Serialize a Right.
     */
    self.serializeRight = function (right) {
      return {
        user: right.user,
        group: right.group,
        level: right.level,
        allow: right.allow,
        origin: right.getSerializedOrigin(),
        enabled: right.enabled()
      };
    };

    /**
     * Serialize a Migration Action.
     */
    self.serializeAction = function (action) {
      // Serialize source and target
      var jsonAction = {
        sourceDocument: action.serializedSourceDocument(),
        targetDocument: action.serializedTargetDocument()
      };

      // Serialize "enabled" field
      if (!action.enabled()) {
        jsonAction.enabled = false;
      }

      // Serialize "deletePrevious" field
      if (action.deletePrevious) {
        jsonAction.deletePrevious = true;
      }

      // Serialize preferences
      if (action.preferences.length &gt; 0) {
        jsonAction.preferences = [];
        for (var i = 0; i &lt; action.preferences.length; ++i) {
          jsonAction.preferences.push(self.serializePreference(action.preferences[i]));
        }
      }

      // Serialize rigts
      if (action.rights.length &gt; 0) {
        jsonAction.rights = [];
        for (var i = 0; i &lt; action.rights.length; ++i) {
          jsonAction.rights.push(self.serializeRight(action.rights[i]));
        }
      }

      // Serialize children
      if (action.children().length &gt; 0) {
        jsonAction.children = [];
        for (var i = 0; i &lt; action.children().length; ++i) {
          var child = self.serializeAction(action.children()[i]);
          jsonAction.children.push(child);
        }
      }

      return jsonAction;
    };

    /**
     * Serialize a plan
     */
    self.serializePlan = function (plan) {
      var jsonPlan = [];
      for (var i = 0; i &lt; plan.actions().length; ++i) {
        jsonPlan.push(self.serializeAction(plan.actions()[i]));
      }
      return jsonPlan;
    };
  };
})
</code>
    </property>
    <property>
      <name>Define the SerializerHelper class</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>14</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>1fa7e4ef-b77d-4da3-8a60-d00b1d7ab297</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Represent the list of XClasses that should be excluded from the migration and handle the UI widget that display it.
 * @since 0.8
 */
define('ExcludedXClasses', ['jquery', 'knockout', 'utils'], function($, ko, utils) {
  /**
   * Construct an ExcludedXClasses.
   */
   return function() {
     var self = this;

     /**
      * The list of XClasses to exclude, as a String.
      */
     self.excludedXClasses = ko.observable('');

     // Make the observable reactive to each keyboard action so the user can immediatly see the checkboxes updated
     // during her typing.
     self.excludedXClasses.extend({ notify: 'always' });

     /**
      * The list of all XClasses that the wiki holds.
      */
     self.allXClasses = [];

     /**
      * Either if the list of classes with checkboxes should be displayed or not.
      */
     self.areCheckboxesDisplayed = ko.observable(false);

     /**
      * Display/Hide the list of classes with checkboxes.
      */
     self.toggleCheckboxVisibility = function () {
       self.areCheckboxesDisplayed(!self.areCheckboxesDisplayed());
     };

     /**
      * Display the list of classes with checkboxes.
      */
     self.showCheckboxes = function () {
       self.areCheckboxesDisplayed(true);
     };

     /**
      * Hide the list of classes with checkboxes.
      */
     self.hideCheckboxes = function () {
       self.areCheckboxesDisplayed(false);
     };

     /**
      * @return the list of excluded XClasses  as a JavaScript array
      */
     self._excludedXClassesAsArray = function () {
       return self.excludedXClasses().split(',');
     };

     /**
      * @param xclass the name of the XClass
      * @return either or not the XClass is excluded or not
      */
     self.isExcluded = function(xclass) {
       return $.inArray(xclass, self._excludedXClassesAsArray()) &gt;= 0;
     };

     /**
      * Update the ExcludedXClasses textarea with the value selected by the checkboxes.
      * @param xclass the name of an XClass
      * @param exclude either the XClass should be excluded or not
      */
     self._updateExcludedXClasses = function (xclass, exclude) {
       var newList = '';
       var oldList = self._excludedXClassesAsArray();
       // We walk through the old list to respect the order written in it to avoid a WTF effect
       for (var i = 0; i &lt; oldList.length; ++i) {
         if (oldList[i] != xclass) {
           newList = utils.appendToString(newList, oldList[i]);
         }
       }
       if (exclude) {
         newList = utils.appendToString(newList, xclass);
       }
       self.excludedXClasses(newList);
     };

     /**
      * Initialize the checkboxes
      */
     self._initCheckbox = function (name) {
       var selected = ko.computed({
         read: function () {
           return self.isExcluded(name);
         },
         write: function (value) {
           self._updateExcludedXClasses(name, value);
         }
       });
       return {'name': name, 'selected': selected};
     };

     /**
      * Initialize the XClasses fields.
      */
     var xclasses = $('#xclasses').attr('data-xclasses').split(',');
     for (var i = 0; i &lt; xclasses.length; ++i) {
       self.allXClasses.push(self._initCheckbox(xclasses[i]));
     }

   };
});
</code>
    </property>
    <property>
      <name>Define the ExcludedXClasses class</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>15</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>73dc05f8-b98c-4bc3-a661-a753aa0fe66f</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Binding handler that implement the ability to change the target name of an action..
 * @since 0.8
 */
define('editable-binding-handler', ['knockout', 'jquery', 'utils'], function (ko, $, utils) {

  ko.bindingHandlers.editable = {
    init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
      var editableElement = $(element);
      var action = bindingContext.$rawData;

      // Add an "pencil" button to after the target name
      var button = $('&lt;button&gt;').addClass('fa fa-pencil btn btn-default btn-xs');
      editableElement.after(button);

      /**
       * Replace the target name displayer by an form that let the user type an other target name.
       */
      button.click(function() {
        // Hide the displayer and the button
        editableElement.hide();
        button.hide();

        // Construct the form
        var form = $('&lt;form&gt;');
        button.before(form);
        form.css('display', 'inline');
        var input = $('&lt;input type="text" class="input-sm"&gt;').attr('placeholder', action.getTargetName());
        form.append(input);
        var accept = $('&lt;button type="submit" class="fa fa-check btn btn-success btn-sm"&gt;');
        input.after(accept);
        var cancel = $('&lt;button class="fa fa-close btn btn-default btn-sm"&gt;');
        accept.after(cancel);

        // Give focus to the input so that the user can immediatly type the new name
        input.focus();

        /**
         * Remove the form and make the displayer visible again
         */
        var removeForm = function () {
          form.remove();
          button.show();
          editableElement.show();
        };

        /**
         * Close the form when the cancel button is clicked
         */
        cancel.click(removeForm);

        /**
         * Close the form when the "escape" button is pressed
         */
        input.keyup(function(event) {
          if (event.which == 27) {
            removeForm();
          }
        });

        /**
         * Check if the new name is acceptable and update the action if it is
         */
        accept.click(function (event) {
          // We do not want the form to be executed by the browser, all the business logic is inside this javascript
          event.preventDefault();

          // Get the value and stop if it is blank or if it has not changed
          var value = input.val().trim();
          if (value.length == 0 || value == action.getTargetName()) {
            removeForm();
            return;
          }

          // Save the old target so that we could put it back if something is wrong afterwards.
          var oldTarget = action.targetDocument();

          // Compute the new target document
          var newTarget = new XWiki.EntityReference(
            // Use the sane name (should be "WebHome")
            oldTarget.name,
            // The entity is a document
            XWiki.EntityType.DOCUMENT,
            // The parent is a space holding the new name
            new XWiki.EntityReference(
              value,
              XWiki.EntityType.SPACE,
              oldTarget.parent.parent
            )
          );

          // Check if the new name is not already used by a sibling action
          var parentContainer = action.parent ? action.parent.children : bindingContext.$root.plan.actions;
          if (utils.hasCollision(value, parentContainer())) {
            alert('Cannot use this name because a page [' + value + '] already exists here in the plan.');
            return;
          }

          // Update the target document
          action.targetDocument(newTarget);
          // Trick: when you call updateParent() on an action, it also update all its children
          action.updateParent(action.parent);

          // If the user wants to use the same name than the source document, it's ok, we don't need more checks
          if (newTarget.equals(action.sourceDocument)) {
            bindingContext.$root.updateLastMovedAction(action, bindingContext);
            removeForm();
            return;
          }

          // Test if the locations of the action and its children are available
          var notification = new XWiki.widgets.Notification('Looking if the location is free.', 'inprogress');
          var locations = utils.getLocations(action, []);
          $.post(utils.getServiceURL(),
            { action: 'checkLocations', locations: JSON.stringify(locations) }, null, 'json')
          .done(function (results) {
            notification.hide();
            if (results.length &gt; 0) {
              alert('Cannot rename this page here because [' + results.join(', ') + '] already exist(s) in the wiki.');
              // Rollback
              action.targetDocument(oldTarget);
              // See above why we do that
              action.updateParent(action.parent);
            } else {
              new XWiki.widgets.Notification('Location is free.', 'done');
            }
            bindingContext.$root.updateLastMovedAction(action, bindingContext);
            removeForm();
          });
        });
      });
    }
  };
});
</code>
    </property>
    <property>
      <name>Define editable-binding-handler</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>NestedPagesMigration.Code.MigrationProjectSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>c6eebc03-7f5c-425b-9c3a-ae876f6fde21</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>6</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>3</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>1</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>5</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>4</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

.migration-plan .movablePicker {
  cursor: pointer;
}

.log {
  background-color: $theme.pageContentBackgroundColor;
}

.log-title {
  text-transform: uppercase;
  font-size: 0.9em;
  font-weight: bold;
}

.droppable-active {
  background-color: lightblue;
}

.droppable-hover {
  background-color: lightgreen !important;
}

.migration-action {
  transition: background-color 1s;
}

.moved-action {
  background-color: lightgreen !important;
}S</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>CSS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
</xwikidoc>
